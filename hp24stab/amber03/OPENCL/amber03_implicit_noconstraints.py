##########################################################################
# this script was generated by openmm-builder. to customize it further,
# you can save the file to disk and edit it with your favorite editor.
##########################################################################

from __future__ import print_function
from simtk.openmm.app import *
from simtk.openmm import *
from simtk.unit import *
from sys import stdout

import argparse

def parse_args(args):
    parser = argparse.ArgumentParser()

    parser.add_argument("-c", "--checkpoint",
                        help="path to an OpenMM checkpoint",
                        type=str
                       )
    return parser.parse_args()

freq = int(1e5)
total = int(1e9)

pdb = PDBFile('input.pdb')
forcefield = ForceField('amber03.xml', 'amber03_obc.xml')

system = forcefield.createSystem(pdb.topology, nonbondedMethod=NoCutoff, constraints=None)
integrator = LangevinIntegrator(300*kelvin, 50/picoseconds, 1.0*femtoseconds)

platform = Platform.getPlatformByName('OpenCL')
properties = {'OpenCLDeviceIndex' : '0'}
simulation = Simulation(pdb.topology, system, integrator, platform, properties)
simulation.context.setPositions(pdb.positions)

simulation.reporters.append(app.DCDReporter('trajectory.dcd', freq))
simulation.reporters.append(app.StateDataReporter("sim.csv", freq, step=True,
    potentialEnergy=True, totalEnergy=True, temperature=True, separator='\t'))

simulation.reporters.append(app.CheckpointReporter('ckpt.chk', freq))

print('Running Production...')

total_steps = 0

while total_steps < total:
    simulation.step(freq)
    total_steps += freq
print('Done!')
